 AndroidCodecBench::AndroidCodecBench
 (
 SkString
 baseName
 ,
 SkData
 *
 encoded
 ,
 int
 sampleSize
 )
 fData
 (
 SkRef
 (
 encoded
 )
 )
 ,
 fSampleSize
 (
 sampleSize
 )
 {
 fName.printf
 (
"AndroidCodec_%s_SampleSize%d"
 ,
 baseName.c_str
 (
 )
 ,
 sampleSize
 )
 ;
 }
 const
 char
 *
 AndroidCodecBench::onGetName
 (
 )
 {
 return
 fName.c_str
 (
 )
 ;
 }
 bool
 AndroidCodecBench::isSuitableFor
 (
 Backend
 backend
 )
 {
 return
 kNonRendering_Backend
 ==
 backend
 ;
 }
 void
 AndroidCodecBench::onDelayedSetup
 (
 )
 {
 std::unique_ptr<
 kAndroidCodec>
 codec
 (
 SkAndroidCodec::MakeFromData
 (
 fData
 )
 )
 ;
 SkISize
 scaledSize
=
 codec
 -
 >
 etSampledDimensions
 (
 fSampleSize
 )
 ;
 fInfo
=
 codec
 -
 >
 etInfo
 (
 )
 (
 scaledSize.width
 (
 )
 ,
 scaledSize.height
 (
 )
 )
 (
kN32
 )
 ;
 if
 (
 kUnpremul_SkAlphaType
 ==
 fInfo.alphaType
 (
 )
 )
 {
 fInfo
=
 fInfo.makeAlphaType
 (
 kPremul_SkAlphaType
 )
 ;
 }
 fPixelStorage.reset
 (
 fInfo.computeMinByteSize
 (
 )
 )
 ;
 }
 void
 AndroidCodecBench::onDraw
 (
 int
 n
 ,
 SkCanvas
 *
 canvas
 )
 {
 std::unique_ptr<
 kAndroidCodec>
 codec
 ;
 SkAndroidCodec::AndroidOptions
 options
 ;
 options.fSampleSize
=
 fSampleSize
 ;
 for
 (
 int
 i
=
0
 ;
 i
 <
 n
 ;
 i
 +
 +
 )
 {
 codec
=
 SkAndroidCodec::MakeFromData
 (
 fData
 )
 ;
 const
 SkCodec::Result
 result
=
 codec
 -
 >
 etAndroidPixels
 (
 fInfo
 ,
 fPixelStorage.get
 (
 )
 ,
 fInfo.minRowBytes
 (
 )
 ,
 &
 options
 )
 ;
 SkASSERT
 (
 result
 ==
 SkCodec::kSuccess
 |
 |
 result
 ==
 SkCodec::kIncompleteInput
 )
 ;
 }
 }
