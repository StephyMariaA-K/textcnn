 template
 BenchRegistry
 *
 BenchRegistry::gHead
 ;
 Benchmark::Benchmark
 (
 )
 {
 }
 const
 char
 *
 Benchmark::getName
 (
 )
 {
 return
 this
 -
 >
 nGetName
 (
 )
 ;
 }
 const
 char
 *
 Benchmark::getUniqueName
 (
 )
 {
 return
 this
 -
 >
 nGetUniqueName
 (
 )
 ;
 }
 SkIPoint
 Benchmark::getSize
 (
 )
 {
 return
 this
 -
 >
 nGetSize
 (
 )
 ;
 }
 void
 Benchmark::delayedSetup
 (
 )
 {
 this
 -
 >
 nDelayedSetup
 (
 )
 ;
 }
 void
 Benchmark::perCanvasPreDraw
 (
 SkCanvas
 *
 canvas
 )
 {
 this
 -
 >
 nPerCanvasPreDraw
 (
 canvas
 )
 ;
 }
 void
 Benchmark::preDraw
 (
 SkCanvas
 *
 canvas
 )
 {
 this
 -
 >
 nPreDraw
 (
 canvas
 )
 ;
 }
 void
 Benchmark::postDraw
 (
 SkCanvas
 *
 canvas
 )
 {
 this
 -
 >
 nPostDraw
 (
 canvas
 )
 ;
 }
 void
 Benchmark::perCanvasPostDraw
 (
 SkCanvas
 *
 canvas
 )
 {
 this
 -
 >
 nPerCanvasPostDraw
 (
 canvas
 )
 ;
 }
 void
 Benchmark::draw
 (
 int
 loops
 ,
 SkCanvas
 *
 canvas
 )
 {
 SkAutoCanvasRestore
 ar
 (
 canvas
 ,
 true
 )
 ;
 this
 -
 >
 nDraw
 (
 loops
 ,
 canvas
 )
 ;
 }
 void
 Benchmark::setupPaint
 (
 SkPaint
 *
 paint
 )
 {
 paint
 -
 >
 etAntiAlias
 (
 true
 )
 ;
 }
 SkIPoint
 Benchmark::onGetSize
 (
 )
 {
 return
 SkIPoint::Make
 (
640
 ,
480
 )
 ;
 }
